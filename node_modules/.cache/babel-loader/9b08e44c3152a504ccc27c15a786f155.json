{"ast":null,"code":"var _jsxFileName = \"/home/brenotainan/projetos/project-recipes-app/src/Provider/Provider.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport context from '../Context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Provider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [showInput, setShowInput] = useState(false);\n  const [result, setResult] = useState('');\n  const [foodCard, setFoodCard] = useState([]);\n  const [drinkCard, setDrinkCard] = useState([]);\n  const [foodCategories, setFoodCategories] = useState([]);\n  const [drinkCategories, setDrinkCategories] = useState([]);\n  const [searchFoodCategories, setSearchFoodCategories] = useState([]);\n  const [searchDrinkCategories, setSearchDrinkCategories] = useState([]);\n  const [foodsIngredients, setFoodsIngredients] = useState([]);\n  const [drinksIngredients, setDrinksIngredients] = useState([]);\n  const [toggleSearchFoodCat, setToggleSearchFoodCat] = useState(false);\n  const [toggleSearchDrinkCat, setToggleSearchDrinkCat] = useState(false);\n  const [foodIngredientSearch, setFoodIngredientSearch] = useState('');\n  const [drinkIngredientSearch, setDrinkIngredientSearch] = useState('');\n  const [changeFoodCategory, setChangeFoodCategory] = useState('');\n  const [changeDrinkCategory, setChangeDrinkCategory] = useState('');\n  const [randomDrink, setRandomDrink] = useState([]);\n  const [randomFood, setRandomFood] = useState([]);\n  const [update, setUpdate] = useState(false);\n  const [procurado, setProcurado] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const [foodDetails, setFoodDetails] = useState('');\n  const [drinksDetails, setDrinksDetails] = useState([]);\n  const [ingredients, setIngredients] = useState('');\n  const [favoritedDrink, setFavoritedDrink] = useState(false);\n  const [favoritedFood, setFavoritedFood] = useState(false);\n  const [exFoodsNationalities, setExFoodsNationalities] = useState([]);\n  const [selecionado, setSelecionado] = useState('');\n  const [botao, setBotao] = useState(false);\n  const errorMessage = 'Sorry, we haven\\'t found any recipes for these filters.';\n\n  const handleData = data => {\n    if (!data.length) {\n      global.alert(errorMessage);\n    }\n\n    setResult(data);\n  };\n\n  const api = (url, input) => {\n    try {\n      const apiFetch = fetch(url);\n      const json = apiFetch.then(response => response.json());\n\n      if (input) {\n        json.then(data => handleData(data));\n      } else {\n        return json;\n      }\n    } catch {\n      global.alert(errorMessage);\n    }\n  };\n\n  const listIngredients = revenue => {\n    const igredientes = Object.keys(revenue).filter(atual => atual.includes('strIngredient'));\n    let ingredient = [];\n\n    for (let i = 0; i < igredientes.length; i += 1) {\n      const atual = `strIngredient${i + 1}`;\n      const medidas = `strMeasure${i + 1}`;\n      const juntos = `${revenue[atual]} ${revenue[medidas]}`;\n\n      if (revenue[atual] && revenue[medidas]) {\n        ingredient = [...ingredient, juntos];\n      } else if (revenue[atual]) {\n        ingredient = [...ingredient, revenue[atual]];\n      } else if (revenue[medidas]) {\n        ingredient = [...ingredient, revenue[medidas]];\n      }\n    }\n\n    const filtrado = ingredient.filter(atual => atual !== ' ');\n    setIngredients(filtrado);\n  };\n\n  const validacao = (fonte, receitaAtual) => {\n    const local = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n    if (fonte === 'drinks' && local) {\n      const validaçãoOn = local.filter(atual => receitaAtual.idDrink === atual.id);\n\n      if (validaçãoOn.length >= 1) {\n        setFavoritedDrink(true);\n      } else {\n        setFavoritedDrink(false);\n      }\n    } else if (fonte === 'foods' && local) {\n      const validaçãoOn = local.filter(atual => receitaAtual.idMeal === atual.id);\n\n      if (validaçãoOn.length >= 1) {\n        setFavoritedFood(true);\n      } else {\n        setFavoritedFood(false);\n      }\n    }\n  };\n\n  const [copiedFoodLink, setFoodCopiedLink] = useState(false);\n\n  const copyToClipboard = idMeal => {\n    navigator.clipboard.writeText(`http://localhost:3000/foods/${idMeal}`);\n    setFoodCopiedLink(true);\n  }; //  verifica se ja foi selecionado\n\n\n  const verificaCheck = (id, fonte) => {\n    const local = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    if (local && local[fonte] && local[fonte][id]) {\n      setSelecionado(local[fonte][id]);\n    }\n  };\n\n  const contextValue = {\n    copyToClipboard,\n    copiedFoodLink,\n    setFoodCopiedLink,\n    showInput,\n    setShowInput,\n    setResult,\n    api,\n    setRandomDrink,\n    setRandomFood,\n    foodCard,\n    setFoodCard,\n    drinkCard,\n    setDrinkCard,\n    randomDrink,\n    randomFood,\n    foodCategories,\n    setFoodCategories,\n    drinkCategories,\n    setDrinkCategories,\n    searchDrinkCategories,\n    searchFoodCategories,\n    setSearchDrinkCategories,\n    setSearchFoodCategories,\n    toggleSearchFoodCat,\n    setToggleSearchFoodCat,\n    foodsIngredients,\n    setFoodsIngredients,\n    drinksIngredients,\n    setDrinksIngredients,\n    toggleSearchDrinkCat,\n    setToggleSearchDrinkCat,\n    changeFoodCategory,\n    setChangeFoodCategory,\n    changeDrinkCategory,\n    setChangeDrinkCategory,\n    foodIngredientSearch,\n    setFoodIngredientSearch,\n    drinkIngredientSearch,\n    setDrinkIngredientSearch,\n    update,\n    setUpdate,\n    result,\n    errorMessage,\n    procurado,\n    setProcurado,\n    searchInput,\n    setSearchInput,\n    foodDetails,\n    setFoodDetails,\n    drinksDetails,\n    setDrinksDetails,\n    listIngredients,\n    ingredients,\n    favoritedDrink,\n    setFavoritedDrink,\n    validacao,\n    favoritedFood,\n    setFavoritedFood,\n    exFoodsNationalities,\n    setExFoodsNationalities,\n    verificaCheck,\n    selecionado,\n    botao,\n    setBotao\n  };\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"O4oTJTWcgPFN1uFOTieiXAxkVtw=\");\n\n_c = Provider;\nexport default Provider;\nProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/brenotainan/projetos/project-recipes-app/src/Provider/Provider.js"],"names":["PropTypes","React","useState","context","Provider","children","showInput","setShowInput","result","setResult","foodCard","setFoodCard","drinkCard","setDrinkCard","foodCategories","setFoodCategories","drinkCategories","setDrinkCategories","searchFoodCategories","setSearchFoodCategories","searchDrinkCategories","setSearchDrinkCategories","foodsIngredients","setFoodsIngredients","drinksIngredients","setDrinksIngredients","toggleSearchFoodCat","setToggleSearchFoodCat","toggleSearchDrinkCat","setToggleSearchDrinkCat","foodIngredientSearch","setFoodIngredientSearch","drinkIngredientSearch","setDrinkIngredientSearch","changeFoodCategory","setChangeFoodCategory","changeDrinkCategory","setChangeDrinkCategory","randomDrink","setRandomDrink","randomFood","setRandomFood","update","setUpdate","procurado","setProcurado","searchInput","setSearchInput","foodDetails","setFoodDetails","drinksDetails","setDrinksDetails","ingredients","setIngredients","favoritedDrink","setFavoritedDrink","favoritedFood","setFavoritedFood","exFoodsNationalities","setExFoodsNationalities","selecionado","setSelecionado","botao","setBotao","errorMessage","handleData","data","length","global","alert","api","url","input","apiFetch","fetch","json","then","response","listIngredients","revenue","igredientes","Object","keys","filter","atual","includes","ingredient","i","medidas","juntos","filtrado","validacao","fonte","receitaAtual","local","JSON","parse","localStorage","getItem","validaçãoOn","idDrink","id","idMeal","copiedFoodLink","setFoodCopiedLink","copyToClipboard","navigator","clipboard","writeText","verificaCheck","contextValue","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport context from '../Context/Context';\n\nfunction Provider({ children }) {\n  const [showInput, setShowInput] = useState(false);\n  const [result, setResult] = useState('');\n  const [foodCard, setFoodCard] = useState([]);\n  const [drinkCard, setDrinkCard] = useState([]);\n  const [foodCategories, setFoodCategories] = useState([]);\n  const [drinkCategories, setDrinkCategories] = useState([]);\n  const [searchFoodCategories, setSearchFoodCategories] = useState([]);\n  const [searchDrinkCategories, setSearchDrinkCategories] = useState([]);\n  const [foodsIngredients, setFoodsIngredients] = useState([]);\n  const [drinksIngredients, setDrinksIngredients] = useState([]);\n  const [toggleSearchFoodCat, setToggleSearchFoodCat] = useState(false);\n  const [toggleSearchDrinkCat, setToggleSearchDrinkCat] = useState(false);\n  const [foodIngredientSearch, setFoodIngredientSearch] = useState('');\n  const [drinkIngredientSearch, setDrinkIngredientSearch] = useState('');\n  const [changeFoodCategory, setChangeFoodCategory] = useState('');\n  const [changeDrinkCategory, setChangeDrinkCategory] = useState('');\n  const [randomDrink, setRandomDrink] = useState([]);\n  const [randomFood, setRandomFood] = useState([]);\n  const [update, setUpdate] = useState(false);\n  const [procurado, setProcurado] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const [foodDetails, setFoodDetails] = useState('');\n  const [drinksDetails, setDrinksDetails] = useState([]);\n  const [ingredients, setIngredients] = useState('');\n  const [favoritedDrink, setFavoritedDrink] = useState(false);\n  const [favoritedFood, setFavoritedFood] = useState(false);\n  const [exFoodsNationalities, setExFoodsNationalities] = useState([]);\n  const [selecionado, setSelecionado] = useState('');\n  const [botao, setBotao] = useState(false);\n  const errorMessage = 'Sorry, we haven\\'t found any recipes for these filters.';\n\n  const handleData = (data) => {\n    if (!data.length) {\n      global.alert(errorMessage);\n    }\n    setResult(data);\n  };\n\n  const api = (url, input) => {\n    try {\n      const apiFetch = fetch(url);\n      const json = apiFetch.then((response) => response.json());\n      if (input) {\n        json.then((data) => handleData(data));\n      } else {\n        return json;\n      }\n    } catch {\n      global.alert(errorMessage);\n    }\n  };\n\n  const listIngredients = (revenue) => {\n    const igredientes = Object.keys(revenue)\n      .filter((atual) => atual.includes('strIngredient'));\n    let ingredient = [];\n    for (let i = 0; i < igredientes.length; i += 1) {\n      const atual = `strIngredient${i + 1}`;\n      const medidas = `strMeasure${i + 1}`;\n      const juntos = `${revenue[atual]} ${revenue[medidas]}`;\n\n      if (revenue[atual] && revenue[medidas]) {\n        ingredient = [...ingredient, juntos];\n      } else if (revenue[atual]) {\n        ingredient = [...ingredient, revenue[atual]];\n      } else if (revenue[medidas]) {\n        ingredient = [...ingredient, revenue[medidas]];\n      }\n    }\n    const filtrado = ingredient.filter((atual) => (\n      atual !== ' '\n    ));\n    setIngredients(filtrado);\n  };\n\n  const validacao = (fonte, receitaAtual) => {\n    const local = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    if (fonte === 'drinks' && local) {\n      const validaçãoOn = local.filter((atual) => receitaAtual.idDrink === atual.id);\n\n      if (validaçãoOn.length >= 1) {\n        setFavoritedDrink(true);\n      } else { setFavoritedDrink(false); }\n    } else if (fonte === 'foods' && local) {\n      const validaçãoOn = local.filter((atual) => receitaAtual.idMeal === atual.id);\n\n      if (validaçãoOn.length >= 1) {\n        setFavoritedFood(true);\n      } else { setFavoritedFood(false); }\n    }\n  };\n  const [copiedFoodLink, setFoodCopiedLink] = useState(false);\n\n  const copyToClipboard = (idMeal) => {\n    navigator.clipboard.writeText(`http://localhost:3000/foods/${idMeal}`);\n    setFoodCopiedLink(true);\n  };\n\n  //  verifica se ja foi selecionado\n  const verificaCheck = (id, fonte) => {\n    const local = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    if (local && local[fonte] && local[fonte][id]) {\n      setSelecionado(local[fonte][id]);\n    }\n  };\n\n  const contextValue = {\n    copyToClipboard,\n    copiedFoodLink,\n    setFoodCopiedLink,\n    showInput,\n    setShowInput,\n    setResult,\n    api,\n    setRandomDrink,\n    setRandomFood,\n    foodCard,\n    setFoodCard,\n    drinkCard,\n    setDrinkCard,\n    randomDrink,\n    randomFood,\n    foodCategories,\n    setFoodCategories,\n    drinkCategories,\n    setDrinkCategories,\n    searchDrinkCategories,\n    searchFoodCategories,\n    setSearchDrinkCategories,\n    setSearchFoodCategories,\n    toggleSearchFoodCat,\n    setToggleSearchFoodCat,\n    foodsIngredients,\n    setFoodsIngredients,\n    drinksIngredients,\n    setDrinksIngredients,\n    toggleSearchDrinkCat,\n    setToggleSearchDrinkCat,\n    changeFoodCategory,\n    setChangeFoodCategory,\n    changeDrinkCategory,\n    setChangeDrinkCategory,\n    foodIngredientSearch,\n    setFoodIngredientSearch,\n    drinkIngredientSearch,\n    setDrinkIngredientSearch,\n    update,\n    setUpdate,\n    result,\n    errorMessage,\n    procurado,\n    setProcurado,\n    searchInput,\n    setSearchInput,\n    foodDetails,\n    setFoodDetails,\n    drinksDetails,\n    setDrinksDetails,\n    listIngredients,\n    ingredients,\n    favoritedDrink,\n    setFavoritedDrink,\n    validacao,\n    favoritedFood,\n    setFavoritedFood,\n    exFoodsNationalities,\n    setExFoodsNationalities,\n    verificaCheck,\n    selecionado,\n    botao,\n    setBotao,\n  };\n  return (\n    <context.Provider value={ contextValue }>\n      { children }\n    </context.Provider>\n  );\n}\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}