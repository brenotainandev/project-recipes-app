{"ast":null,"code":"var _jsxFileName = \"/home/brenotainan/projetos/project-recipes-app/src/Pages/Drinks/InProgress/IngredientsListDrink.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\nimport context from '../../../Context/Context';\nimport favoritesDetails from '../../../Functions/remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IngredientsListDrink(_ref) {\n  _s();\n\n  let {\n    ingredients,\n    id\n  } = _ref;\n  const {\n    selecionado,\n    verificaCheck,\n    setBotao\n  } = useContext(context);\n  const [select, setSelect] = useState('');\n\n  const trabamento = () => {\n    let desmarcado = ingredients;\n    let tratadoMarc = [];\n\n    if (selecionado) {\n      for (let i = 0; i < selecionado.length; i += 1) {\n        desmarcado = desmarcado.filter(atual => atual !== selecionado[i]);\n      }\n\n      tratadoMarc = selecionado.map(atual => ({\n        name: atual,\n        status: true\n      }));\n    }\n\n    const tratadoDes = desmarcado.map(atual => ({\n      name: atual,\n      status: false\n    }));\n    const fim = [...tratadoMarc, ...tratadoDes];\n    setSelect(fim);\n  };\n\n  const selecao = e => {\n    favoritesDetails('drinksIngredients', e, id);\n    verificaCheck(id, 'cocktails');\n  };\n\n  useEffect(() => {\n    trabamento();\n\n    if (selecionado.length === ingredients.length) {\n      setBotao(true);\n    } else {\n      setBotao(false);\n    }\n  }, [ingredients, selecionado]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-group\",\n    children: select ? select.map((_ref2, index) => {\n      let {\n        name,\n        status\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"list-group-item\",\n        htmlFor: `Imput-${index}`,\n        \"data-testid\": `${index}-ingredient-step`,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-check-input me-1\",\n          type: \"checkbox\",\n          value: name,\n          id: `Imput-${index}`,\n          onChange: e => selecao(e),\n          checked: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), status ? /*#__PURE__*/_jsxDEV(\"s\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }, this) : name]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    }) : ingredients.map((agora, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"list-group-item\",\n      htmlFor: `Imput-${index}`,\n      \"data-testid\": `${index}-ingredient-step`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-check-input me-1\",\n        type: \"checkbox\",\n        value: agora,\n        id: `Imput-${index}`,\n        onChange: e => selecao(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), agora]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IngredientsListDrink, \"XsLZzDefnysxmKPpsUpK1uGbEx8=\");\n\n_c = IngredientsListDrink;\nIngredientsListDrink.propTypes = {\n  history: PropTypes.shape({}).isRequired,\n  ingredients: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n    filter: PropTypes.func.isRequired,\n    length: PropTypes.func.isRequired\n  }).isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default IngredientsListDrink;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientsListDrink\");","map":{"version":3,"sources":["/home/brenotainan/projetos/project-recipes-app/src/Pages/Drinks/InProgress/IngredientsListDrink.js"],"names":["PropTypes","React","useContext","useEffect","useState","context","favoritesDetails","IngredientsListDrink","ingredients","id","selecionado","verificaCheck","setBotao","select","setSelect","trabamento","desmarcado","tratadoMarc","i","length","filter","atual","map","name","status","tratadoDes","fim","selecao","e","index","agora","propTypes","history","shape","isRequired","func","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\nimport context from '../../../Context/Context';\nimport favoritesDetails from '../../../Functions/remove';\n\nfunction IngredientsListDrink({ ingredients, id }) {\n  const { selecionado, verificaCheck, setBotao } = useContext(context);\n  const [select, setSelect] = useState('');\n\n  const trabamento = () => {\n    let desmarcado = ingredients;\n    let tratadoMarc = [];\n\n    if (selecionado) {\n      for (let i = 0; i < selecionado.length; i += 1) {\n        desmarcado = desmarcado.filter((atual) => atual !== selecionado[i]);\n      }\n      tratadoMarc = selecionado.map((atual) => ({ name: atual, status: true }));\n    }\n    const tratadoDes = desmarcado.map((atual) => ({ name: atual, status: false }));\n    const fim = [...tratadoMarc, ...tratadoDes];\n    setSelect(fim);\n  };\n\n  const selecao = (e) => {\n    favoritesDetails('drinksIngredients', e, id);\n    verificaCheck(id, 'cocktails');\n  };\n\n  useEffect(() => {\n    trabamento();\n\n    if (selecionado.length === ingredients.length) {\n      setBotao(true);\n    } else {\n      setBotao(false);\n    }\n  }, [ingredients, selecionado]);\n\n  return (\n    <div className=\"list-group\">\n      {select ? select.map(({ name, status }, index) => (\n        <label\n          key={ index }\n          className=\"list-group-item\"\n          htmlFor={ `Imput-${index}` }\n          data-testid={ `${index}-ingredient-step` }\n        >\n          <input\n            className=\"form-check-input me-1\"\n            type=\"checkbox\"\n            value={ name }\n            id={ `Imput-${index}` }\n            onChange={ (e) => selecao(e) }\n            checked={ status }\n          />\n          {\n            status ? <s>{ name }</s> : name\n          }\n        </label>\n      ))\n        : ingredients.map((agora, index) => (\n          <label\n            key={ index }\n            className=\"list-group-item\"\n            htmlFor={ `Imput-${index}` }\n            data-testid={ `${index}-ingredient-step` }\n          >\n            <input\n              className=\"form-check-input me-1\"\n              type=\"checkbox\"\n              value={ agora }\n              id={ `Imput-${index}` }\n              onChange={ (e) => selecao(e) }\n            />\n            { agora }\n          </label>\n        )) }\n    </div>\n  );\n}\n\nIngredientsListDrink.propTypes = {\n  history: PropTypes.shape({\n  }).isRequired,\n  ingredients: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n    filter: PropTypes.func.isRequired,\n    length: PropTypes.func.isRequired,\n  }).isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default IngredientsListDrink;\n"]},"metadata":{},"sourceType":"module"}